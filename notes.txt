What is typescript ?
Static Typed, Superset of Js to provide efficient debugging.
adds helpful and productive features over js
originally developed to handle large projects but cann handle smaller ones too.
It also refers to the compiler which trans-compiles code written in ts syntax to js which is widely supported accross all browsers

Types of Js features :
1. widely suppported : adopted by all browsers
2. es current : specified in the docs but still not adopted by all browsers
3. es future : to be added in future to js
With ts using all these features is possible along with other features in modern browsers
the ts transpiler converts strong , static typed ts to plain js which any browser can understand

advantages of js:
1.catch errors at compile time instead of run time 
2.better tooling support (refactoring, autocomplete and so on)
3.explicitly express intent

/** all code along changes have been made by me in Ch01/01_01 folder **/

/*** for changes made in each chapter refer to their respective folders which
     their status before the beginning of a subchapter and the state 
     after its end

/////Chapter 01

Start:
1. install nodejs and then install typescript globally using npm
2. in the root directory of your project file add the tsconfig.json file
3. In src folder add model.ts then type tsc -w (for watching changes)
4. You will notice a dist folder being with a file model.js w
5. This will consist of all the transpiled js code originally written in ts in model.ts

Primitive Types in Js :
String , Boolean, Number, BigInt, Null, Undefined, Symbol(ES6), 

Complex Types in Js : Objects(complex) - types such as dates and Arrays and even functions fall under this umbrella

We can define types explicitly in ts 
for variable : let name: string = "adeeb"
for functions :  function getInventoryItem(trackingNumber: string): void {}
   the return type can also be Object
   we can also define the structure of the object instead of simply writing object instead of void
    
    function getInventoryItem(trackingNumber: string): {
        displayName: string;
        inventoryType: string;
        trackingNumber: string;
        createDate: Date;
        originalCost: number; 
    } {
        return null;
    }

Type Inference 
: Typescript can infer types of variables from the value assigned to it in some cases
    let inventoryItem = getInventoryItem(trackingNumber);
    here invertoryItem will be assigned the return type of getInventoryItem
    we dont need to define the inventoryItem type explicitly in this case

Gradual typing
: In JS we can change the types of variable dynamically, for eg
  let money = 23; //number 
  money = "A lot"; //redefined to string
  is allowed in js

  To allow this in ts we can define the type of a variable as any
  let originalCost: any = 425;
  originalCost = "A lot of money"
  However, It is not recommended to use this feature in ts unless you really need it

///Chapter 02

Interfaces 
: to describe the structure/shape of an object we can use Interface
    interface InventoryItem { //InventoryItem is the a Custom Type
        displayName: string;
        inventoryType: string;
        trackingNumber: string;
        createDate: Date;
        originalCost: number; 
    }
     //Now the getInventoryItem function can be rewritten as 
    function getInventoryItem(trackingNumber: string): InventoryItem {
        return null;
    }

: this functionality is just to provide code reusability and to help ts
  ts to identify types efficiently so that it can find errors for you easily.
  This will not be reflected in the js code that is rendered.

: if we create and use an object which is not explictly defined 
  as InventoryItem but has the same structure then js will identify 
  it to be of the type InventoryItem implicitly due to its property
  of ducktyping( if an animal behaves and looks like a duck then it is
  a duck although no one has defined it to be a duck).

: We can define attributes and methods in interface to be optional too
  
    interface InventoryItem {
        displayName: string;
        inventoryType: string;
        readonly trackingNumber: string;
        createDate: Date;
        originalCost?: number;  //optional attribute
        addNote?: (note: string) => string; //optional function
    }

    saveInventoryItem({
            displayName: "MacBook Pro 15 Retina",
            inventoryType: "computer",
            trackingNumber: "MBP123456",
            createDate: new Date(),
    }); 

 //duck typing into effect, a new object is implicitly considered to 
  be of type InventoryItem because the its structure matches

: we can define attributes to be read only in interfaces to restrict changes

Enums :

    enum InventoryItemType {
        Computer = "computer",
        Furniture = "furniture"
    }

    interface InventoryItem {
        displayName: string;
        inventoryType: InventoryItemType;
        readonly trackingNumber: string;
        createDate: Date;
        originalCost?: number; //optional attribute
        addNote?: (note: string) => string; //optional method 
    }

    saveInventoryItem({
        displayName: "MacBook Pro 15 Retina",
        inventoryType: InventoryItemType.Computer, //refer to enum items like this
        trackingNumber: "MBP123456",
        createDate: new Date(),
    });

: this will be reflected in the rendered code
  (function (InventoryItemType) {
    InventoryItemType["Computer"] = "computer";
    InventoryItemType["Furniture"] = "furniture";
  })(InventoryItemType || (InventoryItemType = {}));

Literals 
: A more simple approach in this case would be to use Literals
    interface InventoryItem {
        displayName: string;
        inventoryType: "computer" | "furniture"; //using literals instead of enums
        readonly trackingNumber: string;
        createDate: Date;
        originalCost?: number; //optional attribute
        addNote?: (note: string) => string; //optional method 
    }

    saveInventoryItem({
        displayName: "MacBook Pro 15 Retina",
        inventoryType: "computer",
        trackingNumber: "MBP123456",
        createDate: new Date(),
    });

: in case of incorrect value we will get compile time error instead of runtime error
  which would have been the case if we used js

Union types
: In case we want a variable to accept more than 1 types 
 let originalCost: string | number = 425;
 //only these two types would be acceptible
 //any would accept all types

: Other way
 type Cost = string | number; //alias for string and number union
 let originalCost: Cost = 425;

: However be very careful while using such variables to assign 
  value to another variable
  let originalCost : Cost; // no value assigned type can be string or number 
  let newcost : number = originalCost // will give error 

  solution :
  if( typeOf originalCost === "number" ) let newcost : number = originalCost
  else { let newcost = originalCost } //typescript will define newcost to be string


//Chapter 3 - Classes 
: checkout the inventoryStore.js file

: attributes which begin with an underscore are private by convention
  They can still be changed but it is discouraged.
  note that js does not internally define it as private

: functions whose name starts with an underscore are protected
  they cannot( or should not) be used directly

(part 2)
: in typescript all properties must be first defined at the class level
  unlike js where we can directly use them. Their type should also be defined

: we need to define the param and return type of all variables

Access modifiers in ts ( part 3)
: unlike js we can impose private, protected and public access rules
: protected members are accessible within the same class and derived class

Important - Ts is just a superset of js, it does not change how 
it behaves but adds additional features to it. Despite ts complaining
about the errors it will still render in js and be executed but in an 
unexpected way.
The entire purpose of ts is to listen to its warnings and errors.

//Chapter 04 

Part 1 (Generics)

: example in model.ts
  function clone(source) {
    const serialized = JSON.stringify(source);
    return JSON.parse(serialized)
  }

  const cloned = clone(inventoryItem);
  We expect cloned to have the same type as InventoryItem after
  it has been stringyfied and parsed back but it is not the case

: we can make specify the return type of the clone function to 
  be InventoryItem for our case but if we want to make this function
  return the exact type of the parameter dynamically we will use Generics.
  This is somewhat similar to tempelate in c++

  function clone<T> (source: T) : T {
    const serialized = JSON.stringify(source);
    return JSON.parse(serialized)
  } 
  
  // we have simply used a Type Variable T, which we can
    use to refer to the type of the param being passed.

:  To pass multiple types we can do :

   function clone<T, u> (source: T, options: u) : T {
    const serialized = JSON.stringify(source);
    return JSON.parse(serialized)
  }

: We can also extend this concept to interfaces and Js classes

  interfaces KeyValuePair<Tkey, TValue> {
    Key: TKey;
    Value: TValue;
  }

  var keyValue : KeyValue<string,number> = {Key : "something", Value : 1234};
  
  class KeyValuePair<Tkey, TValue> {
    first: TKey;
    second: TValue;
  }

Part 2 ( Removing errors from InventoryStore.ts class)

: Some Errors exist because typescript is not expanding it domain to 
  include functions defined in other js file. To do so we will make
  changes in the tsconfig file

  {
    "compilerOptions": {
        "target": "ES5",
        "outDir": "dist",
        "allowJs": true, //allow Ts to read other JS files
        "checkJs": true  //allow Ts to provide some basic check to other JS files ( although a more robust solution is to convert the entire file to ts)
    }
 }

: Part 3 (Adding support for Native Api's) - Refer ch4_03 from now on
  
  You will notice an error by ts in recognizing inbuilt js library 
  functions and variables which are globally defined. 
  This is because these libraries are not part of the environment ts 
  is targetting by default. So we can include some of those libraries 
  in our tsconfig.

  {
    "compilerOptions": {
        "target": "es5",
        "outDir": "dist",
        "allowJs": true,
        "checkJs": true,
        "lib" : [ "ES2015", "DOM","WebWorker"] //ES2015 is es6
    }
  }

  es6 has some major enhancement over es5, which helped to build 
  complex applications. so we have imported the features of js 
  defined in echma standard 6 which came out in 2015. This also 
  includes Promises

Part 4 : Adding support for third Party libraries ( Jquery & Vue in our case)

: Error for the Vue variable used in App.js:
  Simply define a global variable in model.ts 
  declare var Vue: any;

: This is just a cheat to make typescript happy. We are not checking the
  implementation of Vue library here. 
  We might have had to write all the defination in typescript by hand 
  for a third partly library like Vue to make the checks.

: Luckily, we don't need to write the entire definition by hand, 
because that more and more libraries are actually including Typescript 
metadata right in their bundles. So you'll find yourself running 
into this situation less and less. This means that often the answer 
to this problem is to use the library's NPM module. This happens 
to be the case with the view library, which Typescript is complaining about here. 

:
However, when you come across a library that does not include 
Typescript metadata, there is an opensource community named 
DefinitelyTyped, which maintains TypeScript metadata for virtually 
all of the popular opensource frameworks, and they publish them to 
the NPM package site under the organization name @types. 
For example, in order to get the type information for that dollar 
symbol variable which represents the Jquery library, I can visit 
npmjs.com, and search for @types, followed by the library name 
Jquery. And there it is, the top hit. Simply click on that package, 
copy the console command in the Installation section, and then run 
it in a terminal in the root folder of your application. This will 
download the type definitions for the library into the node_modules 
folder in your application. Typescript will then find and read in these
type definition files, the files that end in .d.ts, which include 
the full description of the library and its APIs. With this in 
place, not only are those errors gone, but I actually have full 
IntelliSense and auto complete support for the library, including 
its documentation, right in my editor.


  





